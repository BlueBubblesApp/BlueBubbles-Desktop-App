{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main/main.ts","webpack:///./src/main/server/constants.ts","webpack:///./src/main/server/databases/chat/entity/Attachment.ts","webpack:///./src/main/server/databases/chat/entity/Chat.ts","webpack:///./src/main/server/databases/chat/entity/Handle.ts","webpack:///./src/main/server/databases/chat/entity/Message.ts","webpack:///./src/main/server/databases/chat/entity/index.ts","webpack:///./src/main/server/databases/chat/index.ts","webpack:///./src/main/server/databases/config/entity/Config.ts","webpack:///./src/main/server/databases/config/entity/index.ts","webpack:///./src/main/server/databases/config/index.ts","webpack:///./src/main/server/databases/transformers/BooleanTransformer.ts","webpack:///./src/main/server/databases/transformers/index.ts","webpack:///./src/main/server/fileSystem/index.ts","webpack:///./src/main/server/index.ts","webpack:///./src/main/server/services/index.ts","webpack:///./src/main/server/services/socket/index.ts","webpack:///external \"electron\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"reflect-metadata\"","webpack:///external \"socket.io-client\"","webpack:///external \"typeorm\"","webpack:///external \"url\""],"names":["win","BlueBubbles","BackendServer","start","createWindow","BrowserWindow","width","height","minWidth","minHeight","transparent","frame","webPreferences","nodeIntegration","process","env","ELECTRON_DISABLE_SECURITY_WARNINGS","loadURL","webContents","once","openDevTools","on","send","window","ipcMain","handle","minimize","maximize","unmaximize","app","quit","exit","platform","DEFAULT_GENERAL_ITEMS","serverAddress","passphrase","lastFetch","Attachment","Entity","PrimaryGeneratedColumn","Column","ManyToMany","type","Message","JoinTable","Chat","Unique","nullable","Handle","OneToMany","message","JoinColumn","name","referencedColumnName","default","transformer","BooleanTransformer","ManyToOne","ChatRepository","constructor","db","initialize","isConnected","connect","dbPath","getPath","createConnection","database","entities","synchronize","logging","getChats","repo","getRepository","find","getMessages","chatGuid","offset","limit","after","before","withChats","withAttachments","withHandle","sort","where","statement","args","Date","query","createQueryBuilder","leftJoinAndSelect","innerJoinAndSelect","andWhere","guid","length","item","orderBy","messages","getMany","createChatFromResponse","res","chat","chatIdentifier","displayName","isArchived","style","map","msg","createMessageFromResponse","participants","createHandleFromResponse","address","country","uncanonicalizedId","chats","handleId","text","subject","error","dateCreated","dateRead","associatedMessageGuid","dateDelivered","isFromMe","isDelayed","isAutoReply","isSystemMessage","isServiceMessage","isForward","cacheRoomnames","isAudioMessage","datePlayed","itemType","groupTitle","groupActionType","isExpired","associatedMessageType","expressiveSendStyleId","timeExpressiveSendStyleId","hasAttachments","Object","keys","includes","attachments","saveChat","existing","ROWID","findOne","update","save","saveHandle","savedChat","theHandle","relations","i","relation","of","add","saveMessage","theMessage","Config","PrimaryColumn","ConfigRepository","config","loadConfig","items","convertFromDbValue","value","hasConfigItem","getConfigItem","setConfigItem","saniVal","convertToDbValue","create","input","Boolean","Number","test","String","getTime","from","dbValue","to","entityValue","FileSystem","attachmentsDir","setup","setupDirectories","fs","chatRepo","configRepo","socketService","setupComplete","servicesStarted","console","log","setupServices","ex","startIpcListeners","fetchChats","initializeDatabases","setupDefaults","key","override","SocketService","socketServer","connected","warn","emitData","loading","syncProgress","loginIsValid","loadingMessage","redirect","now","emitToUI","count","chatObj","participant","payload","withBlurhash","one","getChatMessages","two","Math","ceil","later","event","hasConfig","_","errData","enteredServerAddress","enteredPassword","Promise","resolve","setTimeout","data","firstConnect","reject","io","Error","disconnect","withParticipants","emit","status","identifier"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main/main.ts\");\n","import \"reflect-metadata\";\nimport { app, BrowserWindow, ipcMain } from \"electron\";\nimport * as path from \"path\";\nimport * as url from \"url\";\n\nimport { BackendServer } from \"@server/index\";\n\nlet win: BrowserWindow | null;\nconst BlueBubbles = new BackendServer(win);\nBlueBubbles.start();\n\nconst createWindow = async () => {\n    win = new BrowserWindow({\n        width: 1200,\n        height: 750,\n        minWidth: 550,\n        minHeight: 350,\n        transparent: true,\n        frame: false,\n        webPreferences: { nodeIntegration: true }\n    });\n\n    if (process.env.NODE_ENV !== \"production\") {\n        process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = \"1\"; // eslint-disable-line require-atomic-updates\n        win.loadURL(`http://localhost:2004`);\n    } else {\n        win.loadURL(\n            url.format({\n                pathname: path.join(__dirname, \"index.html\"),\n                protocol: \"file:\",\n                slashes: true\n            })\n        );\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n        // Open DevTools, see https://github.com/electron/electron/issues/12438 for why we wait for dom-ready\n        win.webContents.once(\"dom-ready\", () => {\n            win!.webContents.openDevTools();\n        });\n    }\n\n    win.on(\"closed\", () => {\n        win = null;\n    });\n\n    win.on(\"maximize\", () => {\n        if (win && win.webContents) win.webContents.send(\"maximized\");\n    });\n\n    win.on(\"unmaximize\", () => {\n        if (win && win.webContents) win.webContents.send(\"unmaximized\");\n    });\n\n    BlueBubbles.window = win;\n};\n\nipcMain.handle(\"minimize-event\", () => {\n    if (win && win.webContents) win.minimize();\n});\n\nipcMain.handle(\"maximize-event\", () => {\n    if (win && win.webContents) win.maximize();\n});\n\nipcMain.handle(\"unmaximize-event\", () => {\n    if (win && win.webContents) win.unmaximize();\n});\n\nipcMain.handle(\"close-event\", () => {\n    app.quit();\n    app.exit(0);\n});\n\napp.on(\"browser-window-focus\", () => {\n    if (win && win.webContents) win.webContents.send(\"focused\");\n});\n\napp.on(\"browser-window-blur\", () => {\n    if (win && win.webContents) win.webContents.send(\"blurred\");\n});\n\napp.on(\"ready\", createWindow);\n\napp.on(\"window-all-closed\", () => {\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"activate\", () => {\n    if (win === null) {\n        createWindow();\n    }\n});\n","export const DEFAULT_GENERAL_ITEMS: { [key: string]: Function } = {\n    serverAddress: () => \"\",\n    passphrase: () => \"\",\n    lastFetch: () => 0\n};\n","import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from \"typeorm\";\nimport { Message } from \"@server/databases/chat/entity\";\n\n@Entity()\nexport class Attachment {\n    @PrimaryGeneratedColumn()\n    ROWID: number;\n\n    @Column(\"text\")\n    guid: string;\n\n    @Column(\"text\")\n    uti: string;\n\n    @Column(\"text\")\n    mimeType: string;\n\n    @Column(\"integer\")\n    transferState: number;\n\n    @Column(\"integer\")\n    isOutgoing: number;\n\n    @Column(\"integer\")\n    transferName: number;\n\n    @Column(\"integer\")\n    totalBytes: number;\n\n    @Column(\"integer\")\n    isSticker: number;\n\n    @Column(\"integer\")\n    hideAttachment: number;\n\n    @Column(\"integer\")\n    blurhash: number;\n\n    @Column(\"integer\")\n    height: number;\n\n    @Column(\"integer\")\n    width: number;\n\n    @ManyToMany(type => Message)\n    @JoinTable()\n    messages: Message[];\n}\n","import { Unique, Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from \"typeorm\";\nimport { Handle, Message } from \"@server/databases/chat/entity\";\n\n\n@Entity()\n@Unique([\"guid\"])\nexport class Chat {\n    @PrimaryGeneratedColumn()\n    ROWID: number;\n\n    @Column(\"text\")\n    guid: string;\n\n    @Column(\"integer\")\n    style: number;\n\n    @Column(\"text\")\n    chatIdentifier: string;\n\n    @Column(\"integer\")\n    isArchived: number;\n\n    @Column({ type: \"text\", nullable: true })\n    displayName: string;\n\n    @ManyToMany(type => Handle)\n    @JoinTable()\n    participants: Handle[];\n\n    @ManyToMany(type => Message)\n    @JoinTable()\n    messages: Message[];\n}\n","import { Entity, PrimaryGeneratedColumn, Column, OneToMany, JoinColumn, JoinTable, ManyToMany, Unique } from \"typeorm\";\nimport { Chat, Message } from \"@server/databases/chat/entity\";\n\n@Entity()\n@Unique([\"address\"])\nexport class Handle {\n    @PrimaryGeneratedColumn()\n    ROWID: number;\n\n    @Column(\"text\")\n    address: string;\n\n    @Column({ type: \"text\", nullable: true })\n    country: string;\n\n    @Column({ type: \"text\", nullable: true })\n    uncanonicalizedId: string;\n\n    @OneToMany(\n        type => Message,\n        message => message.handle\n    )\n    @JoinColumn({ name: \"ROWID\", referencedColumnName: \"handleId\" })\n    messages: Message[];\n\n    @ManyToMany(type => Chat)\n    @JoinTable()\n    chats: Chat[];\n}\n","import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinTable, JoinColumn, ManyToMany } from \"typeorm\";\nimport { Handle, Chat, Attachment } from \"@server/databases/chat/entity/\";\nimport { BooleanTransformer } from \"@server/databases/transformers\";\n\n@Entity()\nexport class Message {\n    @PrimaryGeneratedColumn()\n    ROWID: number;\n\n    @Column({ type: \"integer\", nullable: true })\n    handleId: number;\n\n    @Column(\"text\")\n    guid: string;\n\n    @Column(\"text\")\n    text: string;\n\n    @Column({ type: \"text\", nullable: true })\n    subject: string;\n\n    @Column({ type: \"text\", nullable: true })\n    country: string;\n\n    @Column(\"integer\")\n    error: number;\n\n    @Column({ type: \"integer\", nullable: false })\n    dateCreated: number;\n\n    @Column({ type: \"integer\", nullable: false, default: 0 })\n    dateRead: number;\n\n    @Column({ type: \"integer\", nullable: false, default: 0 })\n    dateDelivered: number;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isFromMe: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isDelayed: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isAutoReply: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isSystemMessage: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isServiceMessage: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isForward: boolean;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer })\n    isArchived: boolean;\n\n    @Column({ type: \"text\", nullable: true })\n    cacheRoomnames: string;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer, default: false })\n    isAudioMessage: boolean;\n\n    @Column(\"integer\")\n    datePlayed: number;\n\n    @Column(\"integer\")\n    itemType: number;\n\n    @Column({ type: \"text\", nullable: true })\n    groupTitle: string;\n\n    @Column(\"integer\")\n    groupActionType: number;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer, default: false })\n    isExpired: boolean;\n\n    @Column({ type: \"text\", nullable: true })\n    associatedMessageGuid: string;\n\n    @Column({ type: \"text\", nullable: false, default: 0 })\n    associatedMessageType: number;\n\n    @Column({ type: \"text\", nullable: true })\n    expressiveSendStyleId: string;\n\n    @Column({ type: \"integer\", nullable: false, default: 0 })\n    timeExpressiveSendStyleId: number;\n\n    @Column({ type: \"integer\", transformer: BooleanTransformer, default: false })\n    hasAttachments: boolean;\n\n    @ManyToOne(type => Handle)\n    @JoinColumn({ name: \"handleId\", referencedColumnName: \"ROWID\" })\n    handle: Handle | null;\n\n    @ManyToMany(type => Chat)\n    @JoinTable()\n    chats: Chat[];\n\n    @ManyToMany(type => Attachment)\n    @JoinTable()\n    attachments: Attachment[];\n}\n","import { Attachment } from \"./Attachment\";\nimport { Chat } from \"./Chat\";\nimport { Handle } from \"./Handle\";\nimport { Message } from \"./Message\";\n\nexport { Attachment, Chat, Handle, Message };\n","import { app } from \"electron\";\nimport { createConnection, Connection } from \"typeorm\";\nimport { ChatResponse, HandleResponse, MessageResponse } from \"@server/types\";\n\nimport { Attachment, Chat, Handle, Message } from \"./entity\";\nimport { GetMessagesParams } from \"./types\";\n\nexport class ChatRepository {\n    db: Connection = null;\n\n    constructor() {\n        this.db = null;\n    }\n\n    async initialize(): Promise<Connection> {\n        if (this.db) {\n            if (!this.db.isConnected) await this.db.connect();\n            return this.db;\n        }\n\n        let dbPath = `${app.getPath(\"userData\")}/chat.db`;\n        if (process.env.NODE_ENV !== \"production\") {\n            dbPath = `${app.getPath(\"userData\")}/BlueBubbles-Desktop-App/chat.db`;\n        }\n\n        this.db = await createConnection({\n            name: \"chat\",\n            type: \"sqlite\",\n            database: dbPath,\n            entities: [Attachment, Chat, Handle, Message],\n            synchronize: true,\n            logging: false\n        });\n\n        return this.db;\n    }\n\n    async getChats() {\n        const repo = this.db.getRepository(Chat);\n        return repo.find();\n    }\n\n    async getMessages({\n        chatGuid = null,\n        offset = 0,\n        limit = 100,\n        after = null,\n        before = null,\n        withChats = false,\n        withAttachments = true,\n        withHandle = true,\n        sort = \"DESC\",\n        where = [\n            {\n                statement: \"message.text IS NOT NULL\",\n                args: null\n            }\n        ]\n    }: GetMessagesParams) {\n        // Sanitize some params\n        // eslint-disable-next-line no-param-reassign\n        if (after && typeof(after) === \"number\") after = new Date(after);\n        // eslint-disable-next-line no-param-reassign\n        if (before && typeof(before) === \"number\") before = new Date(before);\n\n        // Get messages with sender and the chat it's from\n        const query = this.db.getRepository(Message).createQueryBuilder(\"message\");\n\n        if (withHandle) query.leftJoinAndSelect(\"message.handle\", \"handle\");\n\n        if (withAttachments)\n            query.leftJoinAndSelect(\n                \"message.attachments\",\n                \"attachment\",\n                \"message.ROWID = message_attachment.message_id AND \" +\n                    \"attachment.ROWID = message_attachment.attachment_id\"\n            );\n\n        // Inner-join because all messages will have a chat\n        if (chatGuid) {\n            query\n                .innerJoinAndSelect(\n                    \"message.chats\",\n                    \"chat\",\n                    \"message.ROWID = message_chat.message_id AND chat.ROWID = message_chat.chat_id\"\n                )\n                .andWhere(\"chat.guid = :guid\", { guid: chatGuid });\n        } else if (withChats) {\n            query.innerJoinAndSelect(\n                \"message.chats\",\n                \"chat\",\n                \"message.ROWID = message_chat.message_id AND chat.ROWID = message_chat.chat_id\"\n            );\n        }\n\n        // Add date restraints\n        if (after)\n            query.andWhere(\"message.date >= :after\", {\n                after: after as Date\n            });\n        if (before)\n            query.andWhere(\"message.date < :before\", {\n                before: before as Date\n            });\n\n        if (where && where.length > 0) for (const item of where) query.andWhere(item.statement, item.args);\n\n        // Add pagination params\n        query.orderBy(\"message.date\", sort);\n        query.offset(offset);\n        query.limit(limit);\n\n        const messages = await query.getMany();\n        return messages;\n    }\n\n    static createChatFromResponse(res: ChatResponse): Chat {\n        const chat = new Chat();\n        chat.guid = res.guid;\n        chat.chatIdentifier = res.chatIdentifier;\n        chat.displayName = res.displayName;\n        chat.isArchived = res.isArchived ? 1 : 0;\n        chat.style = res.style;\n        chat.messages = (res.messages ?? []).map(msg => ChatRepository.createMessageFromResponse(msg));\n        chat.participants = (res.participants ?? []).map(handle => ChatRepository.createHandleFromResponse(handle));\n        return chat;\n    }\n\n    static createHandleFromResponse(res: HandleResponse): Handle {\n        const handle = new Handle();\n        handle.address = res.address;\n        handle.country = res.country;\n        handle.uncanonicalizedId = res.uncanonicalizedId;\n        handle.chats = (res.chats ?? []).map(chat => ChatRepository.createChatFromResponse(chat));\n        handle.messages = (res.messages ?? []).map(msg => ChatRepository.createMessageFromResponse(msg));\n        return handle;\n    }\n\n    static createMessageFromResponse(res: MessageResponse): Message {\n        const message = new Message();\n        message.handleId = res.handleId || res.handleId === 0 ? null : res.handleId;\n        message.guid = res.guid;\n        message.text = res.text;\n        message.subject = res.subject;\n        message.country = res.country;\n        message.error = res.error;\n        message.dateCreated = res.dateCreated ?? 0;\n        message.dateRead = res.dateRead ?? 0;\n        message.associatedMessageGuid = res.associatedMessageGuid;\n        message.dateDelivered = res.dateDelivered ?? 0;\n        message.isFromMe = res.isFromMe;\n        message.isDelayed = res.isDelayed;\n        message.isAutoReply = res.isAutoReply;\n        message.isSystemMessage = res.isSystemMessage;\n        message.isServiceMessage = res.isServiceMessage;\n        message.isForward = res.isForward;\n        message.isArchived = res.isArchived;\n        message.cacheRoomnames = res.cacheRoomnames;\n        message.isAudioMessage = res.isAudioMessage;\n        message.datePlayed = res.datePlayed ?? 0;\n        message.itemType = res.itemType;\n        message.groupTitle = res.groupTitle;\n        message.groupActionType = res.groupActionType;\n        message.isExpired = res.isExpired;\n        message.associatedMessageGuid = res.associatedMessageGuid;\n        message.associatedMessageType = res.associatedMessageType ?? 0;\n        message.expressiveSendStyleId = res.expressiveSendStyleId;\n        message.timeExpressiveSendStyleId = res.timeExpressiveSendStyleId ?? 0;\n        message.hasAttachments = Object.keys(res).includes(\"attachments\") && res.attachments.length > 0;\n        message.chats = (res.chats ?? []).map(chat => ChatRepository.createChatFromResponse(chat));\n        message.handle = res.handle ? ChatRepository.createHandleFromResponse(res.handle) : null;\n        return message;\n    }\n\n    async saveChat(chat: Chat): Promise<Chat> {\n        const repo = this.db.getRepository(Chat);\n        const existing = chat.ROWID ? chat : await repo.findOne({ guid: chat.guid });\n        if (existing) {\n            if (existing.displayName !== chat.displayName) {\n                // Right now, I don't think anything but the displayName will change\n                await repo.update(existing, { displayName: chat.displayName });\n            }\n\n            return existing;\n        }\n\n        // If it doesn't exist, create it\n        return repo.save(chat);\n    }\n\n    async saveHandle(chat: Chat, handle: Handle): Promise<Handle> {\n        // Always save the chat first\n        const savedChat = await this.saveChat(chat);\n        const repo = this.db.getRepository(Handle);\n        let theHandle: Handle = null;\n\n        // If the handle doesn't have a ROWID, try to find it\n        if (!handle.ROWID) {\n            theHandle = await repo.findOne({ address: handle.address }, { relations: [\"chats\"] });\n        }\n\n        // If the handle wasn't found, set it to the input handle\n        if (!theHandle && !handle.ROWID) {\n            theHandle = await repo.save(handle);\n        }\n\n        // Add the handle to the chat if it doesn't already exist\n        if (!theHandle.chats.find((i) => i.ROWID === savedChat.ROWID)) {\n            await repo.createQueryBuilder().relation(Handle, \"chats\").of(theHandle).add(savedChat);\n        }\n\n        return theHandle;\n    }\n\n    async saveMessage(chat: Chat, message: Message): Promise<Message> {\n        // Always save the chat first\n        const savedChat = await this.saveChat(chat);\n        const repo = this.db.getRepository(Message);\n        let theMessage = null;\n\n        // If the message doesn't have a ROWID, try to find it\n        if (!message.ROWID) {\n            theMessage = await repo.findOne({ guid: message.guid });\n        }\n\n        // If it exists, check if anything has really changed before updating\n        if (theMessage) {\n            if (\n                theMessage.dateDelivered !== message.dateDelivered ||\n                theMessage.dateRead !== message.dateRead ||\n                theMessage.error !== message.error ||\n                theMessage.isArchived !== message.isArchived ||\n                theMessage.datePlayed !== message.datePlayed\n            ) {\n                await repo.update(theMessage, {\n                    dateDelivered: message.datePlayed,\n                    dateRead: message.dateRead,\n                    error: message.error,\n                    isArchived: message.isArchived,\n                    datePlayed: message.datePlayed\n                });\n            }\n\n            return theMessage\n        }\n\n        // Add handle to the message\n        if (message.handle) {\n            // eslint-disable-next-line no-param-reassign\n            message.handle = await this.saveHandle(chat, message.handle);\n        }\n\n        // If the message wasn't found, set it to the input message\n        theMessage = await repo.save(message);\n\n        // Add the message to the chat if it doesn't already exist\n        if (!theMessage.chats.find((i) => i.ROWID === savedChat.ROWID)) {\n            await repo.createQueryBuilder().relation(Message, \"chats\").of(theMessage).add(savedChat);\n        }\n\n        return theMessage;\n    }\n}\n","import { Entity, Column, PrimaryColumn } from \"typeorm\";\n\n@Entity()\nexport class Config {\n    @PrimaryColumn(\"text\", { name: \"name\" })\n    name: string;\n\n    @Column(\"text\", { name: \"value\", nullable: true })\n    value: string;\n}\n","import { Config } from \"./Config\";\n\nexport { Config };\n","import { app } from \"electron\";\nimport { createConnection, Connection, Long } from \"typeorm\";\n\nimport { Config } from \"./entity\";\n\nexport class ConfigRepository {\n    db: Connection = null;\n\n    config: { [key: string]: any };\n\n    constructor() {\n        this.db = null;\n        this.config = {};\n    }\n\n    async initialize(): Promise<Connection> {\n        if (this.db) {\n            if (!this.db.isConnected) await this.db.connect();\n            return this.db;\n        }\n\n        let dbPath = `${app.getPath(\"userData\")}/config.db`;\n        if (process.env.NODE_ENV !== \"production\") {\n            dbPath = `${app.getPath(\"userData\")}/BlueBubbles-Desktop-App/config.db`;\n        }\n\n        this.db = await createConnection({\n            name: \"config\",\n            type: \"sqlite\",\n            database: dbPath,\n            entities: [Config],\n            synchronize: true,\n            logging: false\n        });\n\n        // Load default config items\n        await this.loadConfig();\n        return this.db;\n    }\n\n    private async loadConfig() {\n        const repo = this.db.getRepository(Config);\n        const items: Config[] = await repo.find();\n        for (const i of items) this.config[i.name] = ConfigRepository.convertFromDbValue(i.value);\n    }\n\n    /**\n     * Checks if the config has an item\n     *\n     * @param name The name of the item to check for\n     */\n    hasConfigItem(name: string): boolean {\n        return Object.keys(this.config).includes(name);\n    }\n\n    /**\n     * Retrieves a config item from the cache\n     *\n     * @param name The name of the config item\n     */\n    getConfigItem(name: string): Date | string | boolean | number {\n        if (!Object.keys(this.config).includes(name)) return null;\n        return ConfigRepository.convertFromDbValue(this.config[name]);\n    }\n\n    /**\n     * Sets a config item in the database\n     *\n     * @param name The name of the config item\n     * @param value The value for the config item\n     */\n    async setConfigItem(name: string, value: Date | string | boolean | number): Promise<void> {\n        const saniVal = ConfigRepository.convertToDbValue(value);\n        const repo = this.db.getRepository(Config);\n        const item = await repo.findOne({ name });\n        if (item) {\n            item.value = saniVal;\n            await repo.save(item);\n        } else {\n            await repo.create({ name, value: saniVal });\n        }\n\n        this.config[name] = saniVal;\n    }\n\n    /**\n     * Converts a generic string value from the database\n     * to its' corresponding correct typed value\n     *\n     * @param input The value straight from the database\n     */\n    private static convertFromDbValue(input: string): any {\n        if (input === \"1\" || input === \"0\") return Boolean(Number(input));\n        if (/^-{0,1}\\d+$/.test(input)) return Number(input);\n        return input;\n    }\n\n    /**\n     * Converts a typed database value input to a string.\n     *\n     * @param input The typed database value\n     */\n    private static convertToDbValue(input: any): string {\n        if (typeof input === \"boolean\") return input ? \"1\" : \"0\";\n        if (input instanceof Date) return String(input.getTime());\n        return String(input);\n    }\n}\n","import { ValueTransformer } from \"typeorm\";\n\nexport const BooleanTransformer: ValueTransformer = {\n    from: dbValue => Boolean(dbValue),\n    to: entityValue => Number(entityValue)\n};\n","import { BooleanTransformer } from \"./BooleanTransformer\";\n\nexport { BooleanTransformer };\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { app } from \"electron\";\n\nexport class FileSystem {\n    public attachmentsDir = `Attachments`;\n\n    async setup(): Promise<void> {\n        this.setupDirectories();\n    }\n\n    // Creates required directories\n    setupDirectories(): void {\n        if (!fs.existsSync(this.attachmentsDir)) fs.mkdirSync(this.attachmentsDir);\n    }\n}\n","import { ipcMain, BrowserWindow } from \"electron\";\nimport { Connection } from \"typeorm\";\n\n// Config and FileSystem Imports\nimport { Config } from \"@server/databases/config/entity/Config\";\nimport { FileSystem } from \"@server/fileSystem\";\nimport { DEFAULT_GENERAL_ITEMS } from \"@server/constants\";\n\n// Database Imports\nimport { ConfigRepository } from \"@server/databases/config\";\nimport { ChatRepository } from \"@server/databases/chat\";\n\n// Service Imports\nimport { SocketService } from \"@server/services\";\n\nimport { ResponseFormat, ChatResponse, MessageResponse } from \"./types\";\nimport { GetChatMessagesParams } from \"./services/socket/types\";\n\nexport class BackendServer {\n    window: BrowserWindow;\n\n    db: Connection;\n\n    chatRepo: ChatRepository;\n\n    configRepo: ConfigRepository;\n\n    socketService: SocketService;\n\n    fs: FileSystem;\n\n    setupComplete: boolean;\n\n    servicesStarted: boolean;\n\n    constructor(window: BrowserWindow) {\n        this.window = window;\n\n        // Databases\n        this.chatRepo = null;\n        this.configRepo = null;\n\n        // Other helpers\n        this.fs = null;\n\n        // Services\n        this.socketService = null;\n\n        this.setupComplete = false;\n        this.servicesStarted = false;\n    }\n\n    /**\n     * Starts the back-end \"server\"\n     */\n    async start(): Promise<void> {\n        console.log(\"Starting BlueBubbles Backend...\");\n        await this.setup();\n\n        try {\n            console.log(\"Launching Services..\");\n            await this.setupServices();\n        } catch (ex) {\n            console.log(\"Failed to launch server services.\", \"error\");\n        }\n\n        console.log(\"Starting Configuration IPC Listeners...\");\n        this.startIpcListeners();\n\n        // Fetch the chats upon start\n        console.log(\"Syncing initial chats...\");\n        await this.fetchChats();\n    }\n\n    /**\n     * Sets up the server by initializing a \"filesystem\" and other\n     * tasks such as setting up the databases and internal services\n     */\n    private async setup(): Promise<void> {\n        console.log(\"Initializing database...\");\n        await this.initializeDatabases();\n\n        try {\n            console.log(\"Initializing filesystem...\");\n            this.fs = new FileSystem();\n            this.fs.setup();\n        } catch (ex) {\n            console.log(`!Failed to setup filesystem! ${ex.message}`);\n        }\n\n        this.setupComplete = true;\n    }\n\n    private async initializeDatabases() {\n        try {\n            console.log(\"Connecting to messaging database...\");\n            this.chatRepo = new ChatRepository();\n            await this.chatRepo.initialize();\n        } catch (ex) {\n            console.log(`Failed to connect to messaging database! ${ex.message}`);\n            console.log(ex);\n        }\n\n        try {\n            console.log(\"Connecting to settings database...\");\n            this.configRepo = new ConfigRepository();\n            await this.configRepo.initialize();\n        } catch (ex) {\n            console.log(`Failed to connect to settings database! ${ex.message}`);\n        }\n\n        await this.setupDefaults();\n    }\n\n    /**\n     * Sets up default database values for configuration items\n     */\n    private async setupDefaults(): Promise<void> {\n        try {\n            const repo = this.configRepo.db.getRepository(Config);\n            for (const key of Object.keys(DEFAULT_GENERAL_ITEMS)) {\n                const item = await repo.findOne({ name: key });\n                if (!item) await this.configRepo.setConfigItem(key, DEFAULT_GENERAL_ITEMS[key]());\n            }\n        } catch (ex) {\n            console.log(`Failed to setup default configurations! ${ex.message}`);\n        }\n    }\n\n    /**\n     * Sets up any internal services that need to be instantiated and configured\n     */\n    private async setupServices(override = false) {\n        if (this.servicesStarted && !override) return;\n\n        try {\n            console.log(\"Initializing up socket connection...\");\n            this.socketService = new SocketService(this.db, this.chatRepo, this.configRepo, this.fs);\n\n            // Start the socket service\n            await this.socketService.start();\n        } catch (ex) {\n            console.log(`Failed to setup socket service! ${ex.message}`);\n        }\n\n        this.servicesStarted = true;\n    }\n\n    /**\n     * Fetches chats from the server based on the last time we fetched data.\n     * This is what the server itself calls when it is refreshed or reloaded.\n     * The front-end _should not_ call this function.\n     */\n    async fetchChats(): Promise<void> {\n        if (!this.socketService?.socketServer?.connected) {\n            console.warn(\"Cannot fetch chats when no socket is connected!\");\n            return;\n        }\n\n        const emitData = {\n            loading: true,\n            syncProgress: 0,\n            loginIsValid: true,\n            loadingMessage: \"Connected to the server! Fetching chats...\",\n            redirect: null\n        };\n\n        const now = new Date();\n        const lastFetch = this.configRepo.getConfigItem(\"lastFetch\") as number;\n        const chats: ChatResponse[] = await this.socketService.getChats({});\n\n        emitData.syncProgress = 1;\n        emitData.loadingMessage = `Got ${chats.length} chats from the server. Fetching messages since ${new Date(\n            lastFetch\n        )}`;\n        console.log(emitData.loadingMessage);\n        this.emitToUI(\"setup-update\", emitData);\n\n        // Iterate over each chat and fetch their messages\n        let count = 1;\n        for (const chat of chats) {\n            // First, emit the chat to the front-end\n            this.emitToUI(\"chat\", chat);\n\n            // Second, save the chat to the database\n            const chatObj = ChatRepository.createChatFromResponse(chat);\n            const savedChat = await this.chatRepo.saveChat(chatObj);\n\n            // Third, save the participants for the chat\n            for (const participant of chat.participants ?? []) {\n                const handle = ChatRepository.createHandleFromResponse(participant);\n                await this.chatRepo.saveHandle(savedChat, handle);\n            }\n\n            // Build message request params\n            const payload: GetChatMessagesParams = { withChats: false, limit: 25, offset: 0, withBlurhash: true };\n            if (lastFetch) {\n                payload.after = lastFetch;\n                // Since we are fetching after a date, we want to get as much as we can\n                payload.limit = 1000;\n            }\n\n            // Third, let's fetch the messages from the DB\n            const one = new Date();\n            const messages: MessageResponse[] = await this.socketService.getChatMessages(chat.guid, payload);\n            const two = new Date();\n            console.log(`Fetch took ${two.getTime() - one.getTime()} ms`);\n            emitData.loadingMessage = `Syncing ${messages.length} messages for ${count} of ${chats.length} chats`;\n            console.log(emitData.loadingMessage);\n\n            // Fourth, let's save the messages to the DB\n            for (const message of messages) {\n                const msg = ChatRepository.createMessageFromResponse(message);\n                await this.chatRepo.saveMessage(savedChat, msg);\n            }\n\n            // Lastly, save the attachments (if any)\n            // TODO\n\n            emitData.syncProgress = Math.ceil((count / chats.length) * 100);\n            if (emitData.syncProgress > 100) emitData.syncProgress = 100;\n            this.emitToUI(\"setup-update\", emitData);\n            count += 1;\n        }\n\n        // Tell the UI we are finished\n        const later = new Date();\n        emitData.redirect = \"/messaging\";\n        emitData.syncProgress = 100;\n        emitData.loadingMessage = `Finished fetching messages from socket server in [${later.getTime() -\n            now.getTime()} ms].`;\n        console.log(emitData.loadingMessage);\n        this.emitToUI(\"setup-update\", emitData);\n\n        // Save the last fetch date\n        this.configRepo.setConfigItem(\"lastFetch\", now);\n    }\n\n    private startIpcListeners() {\n        ipcMain.handle(\"set-config\", async (event, args) => {\n            for (const item of Object.keys(args)) {\n                const hasConfig = this.configRepo.hasConfigItem(item);\n                if (hasConfig && this.configRepo.getConfigItem(item) !== args[item]) {\n                    await this.configRepo.setConfigItem(item, args[item]);\n                }\n            }\n\n            this.emitToUI(\"config-update\", this.configRepo.config);\n            return this.configRepo.config;\n        });\n\n        ipcMain.handle(\"start-socket-setup\", async (_, args) => {\n            const errData = {\n                loading: true,\n                syncProgress: 0,\n                loginIsValid: false,\n                loadingMessage: \"Setup is starting...\"\n            };\n\n            // Make sure the config DB is setup\n            if (!this.configRepo || !this.configRepo.db.isConnected) {\n                errData.loadingMessage = \"Configuration DB is not yet setup!\";\n                return this.emitToUI(\"setup-update\", errData);\n            }\n\n            // Save the config items\n            await this.configRepo.setConfigItem(\"serverAddress\", args.enteredServerAddress);\n            await this.configRepo.setConfigItem(\"passphrase\", args.enteredPassword);\n\n            try {\n                // If we can't even connect, GTFO\n                await this.socketService.start(true);\n            } catch {\n                errData.loadingMessage = \"Could not connect to the server!\";\n                return this.emitToUI(\"setup-update\", errData);\n            }\n\n            // Wait 1 second to see if we got disconnected\n            await new Promise(resolve => setTimeout(resolve, 1000));\n\n            // Now check if we are disconnected. If creds are wrong, we will get disconnected here\n            if (!this.socketService.socketServer.connected) {\n                errData.loadingMessage = \"Disconnected from socket server! Credentials may be incorrect!\";\n                return this.emitToUI(\"setup-update\", errData);\n            }\n\n            // Start fetching the data\n            this.fetchChats();\n            return null; // Consistent return\n        });\n    }\n\n    private emitToUI(event: string, data: any) {\n        if (this.window) this.window.webContents.send(event, data);\n    }\n}\n","import { SocketService } from \"./socket\";\n\nexport { SocketService};","import * as io from \"socket.io-client\";\n\n// Internal Libraries\nimport { FileSystem } from \"@server/fileSystem\";\nimport { ResponseFormat, ChatResponse, MessageResponse } from \"@server/types\";\n\n// Database Dependency Imports\nimport { ConfigRepository } from \"@server/databases/config\";\nimport { ChatRepository } from \"@server/databases/chat\";\nimport { Connection } from \"typeorm\";\n\nimport { GetChatsParams, GetChatMessagesParams } from \"./types\";\n\nexport class SocketService {\n    db: Connection;\n\n    socketServer: SocketIOClient.Socket;\n\n    chatRepo: ChatRepository;\n\n    configRepo: ConfigRepository;\n\n    fs: FileSystem;\n\n    serverAddress: string;\n\n    passphrase: string;\n\n    /**\n     * Starts up the initial Socket.IO connection and initializes other\n     * required classes and variables\n     *\n     * @param chatRepo The iMessage database repository\n     * @param configRepo The app's settings repository\n     * @param fs The filesystem class handler\n     */\n    constructor(db: Connection, chatRepo: ChatRepository, configRepo: ConfigRepository, fs: FileSystem) {\n        this.db = db;\n\n        this.socketServer = null;\n        this.chatRepo = chatRepo;\n        this.configRepo = configRepo;\n        this.fs = fs;\n    }\n\n    /**\n     * Sets up the socket listeners\n     */\n    async start(firstConnect = false): Promise<boolean> {\n        if (\n            !this.configRepo ||\n            !this.configRepo.getConfigItem(\"serverAddress\") ||\n            !this.configRepo.getConfigItem(\"passphrase\")\n        ) {\n            console.error(\"Setup has not been completed!\");\n            return false;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.socketServer = io(this.configRepo.getConfigItem(\"serverAddress\") as string, {\n                query: {\n                    guid: this.configRepo.getConfigItem(\"passphrase\")\n                }\n            });\n\n            this.socketServer.on(\"connect\", () => {\n                console.log(\"Connected to server via socket.\");\n                resolve(true);\n            });\n\n            this.socketServer.on(\"disconnect\", () => {\n                console.log(\"Disconnected from socket server.\");\n                reject(new Error(\"Disconnected from socket.\"));\n            });\n\n            this.socketServer.on(\"connect_error\", () => {\n                console.log(\"Unable to connect to server.\");\n\n                // If this is the first/initial connect, disconnect if there is an error\n                if (firstConnect) this.socketServer.disconnect();\n                reject(new Error(\"Unable to connect to server.\"));\n            });\n        });\n    }\n\n    async getChats({ withParticipants = true }: GetChatsParams): Promise<ChatResponse[]> {\n        return new Promise<ChatResponse[]>((resolve, reject) => {\n            this.socketServer.emit(\"get-chats\", { withParticipants }, (res: ResponseFormat) => {\n                if ([200, 201].includes(res.status)) {\n                    resolve(res.data as ChatResponse[]);\n                } else {\n                    reject(res.message);\n                }\n            });\n        });\n    }\n\n    async getChatMessages(\n        identifier: string,\n        { offset = 0, limit = 25, after = null, before = null, withChats = false, sort = \"DESC\" }: GetChatMessagesParams\n    ): Promise<MessageResponse[]> {\n        return new Promise<MessageResponse[]>((resolve, reject) => {\n            this.socketServer.emit(\n                \"get-chat-messages\",\n                {\n                    identifier,\n                    offset,\n                    limit,\n                    after,\n                    before,\n                    withChats,\n                    sort\n                },\n                res => {\n                    if ([200, 201].includes(res.status)) {\n                        resolve(res.data as MessageResponse[]);\n                    } else {\n                        reject(res.message);\n                    }\n                }\n            );\n        });\n    }\n}\n\n// import {createConnection, getManager} from \"typeorm\";\n// import {Handle} from \"../entities/messaging/Handle\";\n// import {chatPrevGetAllAction} from \"../actions/ChatPrevGetAllAction\";\n\n// //Connect to server with socket\n// export async function ConnectToServer(url, aGuid){\n\n// }\n\n// createConnection({\n//     type: \"sqlite\",\n//     database: \"src/main/server/db/messaging.db\",\n//     entities: [\n//         Handle\n//     ],\n//     synchronize: true,\n//     logging: false\n// }).then(async connection => {\n//     const io = require('socket.io-client')\n//     const socket = io(\"\",{\n//     query: {\n//         guid: \"\"\n//     }\n//     })\n\n//     // On Socket Connect\n//     socket.on('connect', () => {\n//     console.log(socket.connected)\n//     const firstAppStartUp = true;\n\n//     if (firstAppStartUp){\n//         //Get all chats from server and save locally\n//         // initFromServer();\n//         GetAllChatsFromServer();\n//         console.log(\"here\");\n//     } else{\n\n//     }\n//     });\n\n//     // let handle = new Handle();\n//     // handle.address = \"\";\n\n//     //Get All Chats\n//     function GetAllChatsFromServer() {\n//         socket.emit('get-chats',true,(data) => {\n//         console.log(data.data[0].participants[0].address);\n//         await GetHandle();\n//         chatPrevGetAllAction();\n\n//         //Get Handle\n//         asyncfunction GetHandle() {\n//             let handleRepository = connection.getRepository(Handle);\n//             let i;\n//             for(i=0; i < Object.keys(data.data).length; i++){\n//                 let handle = new Handle();\n//                 if(data.data[i].participants[0].address != null) {\n//                     handle.address = data.data[i].participants[0].address;\n//                 };\n//                 if(data.data[i].participants[0].country != null) {\n//                     handle.country = data.data[i].participants[0].country;\n//                 };\n//                 if(data.data[i].participants[0].uncanonicalizedId != null) {\n//                     handle.uncanonicalizedId = data.data[i].participants[0].uncanonicalizedId;\n//                 } else{\n//                     handle.uncanonicalizedId = \"X:XX PM\";\n//                 };\n//                 // console.log(handle.address);\n//                 try {\n//                     // return connection.manager\n//                     //             .save(handle)\n//                     //             .then(handle => {\n//                     //                 console.log(\"handle has been saved. handle address is\", handle.address);\n//                     //             });\n//                     handleRepository.save(handle);\n//                     console.log(\"Handle saved\");\n//                 } catch (err){\n//                     console.log(err);\n//                 }\n\n//             }\n//         }\n\n//             return data\n//         })\n//     }\n\n// }).catch(error => console.log(\"TypeORM connection error: \", error));\n\n// // const initFromServer = {\n\n// // }\n\n// //Get A Single Chat by guid\n// function GetSingleChat(guid){\n//     socket.emit(\"get-chat\",{chatGuid: guid}, (data) =>{\n//         console.log(data.data)\n//         return data.data\n//     })\n// }\n\n// //Get All Messages In A Chat\n// function GetChatMessages(guid){\n//     socket.emit(\"get-chat-messages\",{identifier: guid}, (data) =>{\n//         console.log(data.data)\n//         return data.data\n//     })\n// }\n\n// //Get Most Recent Message For A Given guid\n// function GetMostRecentMessage(guid){\n//     socket.emit(\"get-last-chat-message\",{identifier: guid}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Get Attachment By guid\n// function GetAttachmentByGUID(guid){\n//     socket.emit(\"get-attatchment\",{identifier: guid}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Get Attachment Chunk By guid\n// function GetAttachmentChunkByGUID(guid){\n//     socket.emit(\"get-attatchment-chunk\",{identifier: guid}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Get Participants In A Chat\n// function GetChatParticipants(guid){\n//     socket.emit(\"get-participants\",{identifier: guid}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Send A Message\n// function SendMessage(chatGuid, myMessage) {\n//     socket.emit(\"send-message\",{guid: chatGuid, message: myMessage}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Send A Message With Chunked Attachments\n// function SendMessageWithAttachment(guid, myMessage,myAttachmentData){\n//     socket.emit(\"send-message-chunk\",{guid: guid, message: myMessage, attachmentData: myAttachmentData}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Start A Chat\n// function NewChat(guid, chatParticipants){\n//     socket.emit(\"start-chat\",{identifier: guid, participants: chatParticipants}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Rename A Group Chat\n// function RenameGroupChat(guid, newGroupName) {\n//     socket.emit(\"rename-group\",{identifier: guid, newName: newGroupName}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Add A Participant To Chat\n// function AddParticipantToChat(guid, participantAddress){\n//     socket.emit(\"add-participant\",{identifier: guid, address: participantAddress}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Remove A Participant To Chat\n// function RemoveParticipantToChat(guid, participantAddress){\n//     socket.emit(\"remove-participant\",{identifier: guid, address: participantAddress}, (data) =>{\n//         console.log(data)\n//         return data\n//     })\n// }\n\n// //Send Reaction (NOT IMPLEMENTED IN SERVER)\n// function SendReaction(guid) {\n//     socket.emit(\"send-reaction\",{identifier: guid}, (data) =>{\n//         console.log(data)\n//     })\n// }\n","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"socket.io-client\");","module.exports = require(\"typeorm\");","module.exports = require(\"url\");"],"sourceRoot":""}